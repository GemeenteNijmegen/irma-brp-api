<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xsl:output indent="yes" method="xml"/>
	<xsl:template exclude-result-prefixes="xs S gban ns2 soapenv" match="/" xmlns:S="http://schemas.xmlsoap.org/soap/envelope/" xmlns:gban="https://data-test.nijmegen.nl/GbaNaw/" xmlns:ns2="http://www.competent.nl/gbav/v1" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
		<xsl:variable name="rootPersoon" select="/S:Envelope/S:Body/ns2:gbavAntwoord/resultaten/persoon"/>
		<persoon>
			<persoonsgegevens>
				<initialen>
					<xsl:call-template name="create_voorletters">
						<xsl:with-param name="voornamen" select="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0210']/omschrijving/text()"/>
					</xsl:call-template>
				</initialen>
				<voornamen>
					<xsl:value-of select="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0210']/omschrijving/text()"/>
				</voornamen>
				<voorvoegsel>
					<xsl:value-of select="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0230']/omschrijving/text()"/>
				</voorvoegsel>
				<achternaam>
					<xsl:value-of select="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0240']/omschrijving/text()"/>
				</achternaam>
				<volledigenaam>
					<xsl:comment>houden we vooralsnog leeg.</xsl:comment>
				</volledigenaam>
				<Geboortedatum>
					<xsl:call-template name="transform_datum">
						<xsl:with-param name="datum" select="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0310']/waarde/text()"/>
					</xsl:call-template>
				</Geboortedatum>
				<geslacht>
					<xsl:value-of select="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0410']/omschrijving/text()"/>
				</geslacht>
				<Nationaliteit>
					<xsl:value-of select="$rootPersoon/categorieen/categorie[nummer='04']/rubrieken/rubriek[nummer='0510']/omschrijving/text()"/>
				</Nationaliteit>
			</persoonsgegevens>
			<adres>
				<straat>
					<xsl:value-of select="$rootPersoon/categorieen/categorie[nummer='08']/rubrieken/rubriek[nummer='1110']/omschrijving/text()"/>
				</straat>
				<huisnummer>
					<xsl:call-template name="create_huisnr">
						<xsl:with-param name="huisnummer" select="$rootPersoon/categorieen/categorie[nummer='08']/rubrieken/rubriek[nummer='1120']/waarde/text()"/>
						<xsl:with-param name="huisletter" select="$rootPersoon/categorieen/categorie[nummer='08']/rubrieken/rubriek[nummer='1130']/waarde/text()"/>
						<xsl:with-param name="hnrtoevoeging" select="$rootPersoon/categorieen/categorie[nummer='08']/rubrieken/rubriek[nummer='1140']/waarde/text()"/>
						<xsl:with-param name="hnraanduiding" select="$rootPersoon/categorieen/categorie[nummer='08']/rubrieken/rubriek[nummer='1150']/waarde/text()"/>
					</xsl:call-template>
				</huisnummer>
				<Postcode>
					<xsl:call-template name="create_postcode">
						<xsl:with-param name="pcode" select="$rootPersoon/categorieen/categorie[nummer='08']/rubrieken/rubriek[nummer='1160']/waarde/text()"/>
					</xsl:call-template>
				</Postcode>
				<Gemeente>
					<xsl:value-of select="$rootPersoon/categorieen/categorie[nummer='08']/rubrieken/rubriek[nummer='0910']/omschrijving/text()"/>
				</Gemeente>
				<woonplaats>
					<xsl:value-of select="$rootPersoon/categorieen/categorie[nummer='08']/rubrieken/rubriek[nummer='1170']/omschrijving/text()"/>
				</woonplaats>
			</adres>
			<BSN>
				<bsn>
					<xsl:value-of select="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0120']/omschrijving/text()"/>
				</bsn>
			</BSN>
			
			<xsl:choose>
				<!-- als geboortedatum 0000-00-00 is dan geen agelimits bepalen -->
				<xsl:when test="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0310']/waarde/text() = '00000000' ">
					<invalidbirthdate>yes</invalidbirthdate>
				</xsl:when>
				<xsl:otherwise>
					<agelimits>
						<over12>
							<xsl:call-template name="setAgeLimit">
								<xsl:with-param name="agelevel" select="12"/>
								<xsl:with-param name="birthdate" select="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0310']/waarde/text()"/>
							</xsl:call-template>
						</over12>
						<over16>
							<xsl:call-template name="setAgeLimit">
								<xsl:with-param name="agelevel" select="16"/>
								<xsl:with-param name="birthdate" select="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0310']/waarde/text()"/>
							</xsl:call-template>
						</over16>
						<over18>
							<xsl:call-template name="setAgeLimit">
								<xsl:with-param name="agelevel" select="18"/>
								<xsl:with-param name="birthdate" select="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0310']/waarde/text()"/>
							</xsl:call-template>
						</over18>
						<over21>
							<xsl:call-template name="setAgeLimit">
								<xsl:with-param name="agelevel" select="21"/>
								<xsl:with-param name="birthdate" select="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0310']/waarde/text()"/>
							</xsl:call-template>
						</over21>
						<over65>
							<xsl:call-template name="setAgeLimit">
								<xsl:with-param name="agelevel" select="65"/>
								<xsl:with-param name="birthdate" select="$rootPersoon/categorieen/categorie[nummer='01']/rubrieken/rubriek[nummer='0310']/waarde/text()"/>
							</xsl:call-template>
						</over65>
					</agelimits>
				</xsl:otherwise>
			</xsl:choose>
			
			
			<xsl:choose>
				<xsl:when test="$rootPersoon/categorieen/categorie[nummer='12']">
					<!-- cat12 bestaat, dus for-each om alle id bewijzen te achterhalen -->
					<reisdocumenten>
						<xsl:for-each select="$rootPersoon/categorieen/categorie[nummer='12']">
							<!-- controleren of id bewwijs nog niet verlopen is -->
							<document>
								<xsl:variable name="showCurrent" select="current()/text()"> </xsl:variable>
								<xsl:element name="soortdocument">
									<xsl:value-of select="current()/rubrieken/rubriek[nummer='3510']/omschrijving/text()"/>
								</xsl:element>
								<xsl:element name="documentnummer">
									<xsl:value-of select="current()/rubrieken/rubriek[nummer='3520']/waarde/text()"/>
								</xsl:element>
								<xsl:element name="datumuitgifte">
									<xsl:call-template name="transform_datum">
										<xsl:with-param name="datum" select="current()/rubrieken/rubriek[nummer='3530']/waarde/text()"/>
									</xsl:call-template>
								</xsl:element>
								<xsl:element name="uitgever">
									<xsl:value-of select="current()/rubrieken/rubriek[nummer='3540']/waarde/text()"/>
								</xsl:element>
								<xsl:element name="einddatum">
									<xsl:call-template name="transform_datum">
										<xsl:with-param name="datum" select="current()/rubrieken/rubriek[nummer='3550']/waarde/text()"/>
									</xsl:call-template>
								</xsl:element>
							</document>
						</xsl:for-each>
					</reisdocumenten>
				</xsl:when>
			</xsl:choose>
		</persoon>
	</xsl:template>
	<!-- ############################################# -->
	<!-- bepalen of agelimit gehaald wordt  -->
	<xsl:template name="setAgeLimit">
		<!-- ############################################# -->
		<xsl:param name="agelevel"/>
		<xsl:param name="birthdate"/>
		<!-- input: 19770924 -->
		<!-- <xsl:when test="xs:dateTime($var1) gt xs:dateTime($var2)">...</xsl:when> -->
		<!-- getbirthyear, add agelevel, convert to xs:date with correct birthday and birthmonth. -->
		<!-- compare adjusted birthdate with currentdate. if currentdate greater then adjusted birthdate agelimit is yes, otherwise agelimit is no -->
		<!-- example: birthdate: 01-09-1977. Agelevel=18. Adjusted birthdate: 01-09-1995. currentdate is 25-05-2018. currentdate is greater.AgeLimit 'over18' is yes -->
		<xsl:variable name="birthYearAdjusted">
			<xsl:value-of select="xs:integer(substring($birthdate,1,4)) + $agelevel"/>
		</xsl:variable>
		<xsl:variable name="birthdateAdjusted" select="xs:date(concat(
		$birthYearAdjusted,'-',
		substring($birthdate,5,2),'-',
		substring($birthdate,7,2)))
		"/>
		<xsl:choose>
			<xsl:when test="xs:date(current-date()) &gt; xs:date($birthdateAdjusted)">
				<xsl:text>yes</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>no</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<!-- ############################################# -->
	<!-- Aanmaken (geboorte) datum in formaat: DD-MM-YYYY -->
	<!-- input is datum in BRP formaat: yyyymmdd -->
	<xsl:template name="transform_datum">
		<!-- ############################################# -->
		<xsl:param name="datum"/>
		<xsl:value-of select="substring($datum,7,2)"/>
		<xsl:text>-</xsl:text>
		<xsl:value-of select="substring($datum,5,2)"/>
		<xsl:text>-</xsl:text>
		<xsl:value-of select="substring($datum,1,4)"/>
	</xsl:template>
	<!-- ############################################# -->
	<!-- Aanmaken Postcode in formaat: AAAA BB -->
	<xsl:template name="create_postcode">
		<!-- ############################################# -->
		<xsl:param name="pcode"/>
		<xsl:value-of select="substring($pcode,1,4)"/>
		<xsl:text> </xsl:text>
		<xsl:value-of select="substring($pcode,5,2)"/>
	</xsl:template>
	<!-- ############################################# -->
	<!-- huisnr incl alle potentiele toevoegingen -->
	<xsl:template name="create_huisnr">
		<!-- ############################################# -->
		<xsl:param name="huisnummer"/>
		<xsl:param name="huisletter"/>
		<xsl:param name="hnrtoevoeging"/>
		<xsl:param name="hnraanduiding"/>
		<xsl:variable name="volledig">
			<xsl:value-of select="$huisnummer"/>
			<xsl:text> </xsl:text>
			<xsl:value-of select="$huisletter"/>
			<xsl:text> </xsl:text>
			<xsl:value-of select="$hnrtoevoeging"/>
			<xsl:text> </xsl:text>
			<!-- aanduidingBijHuisnummer alleen toevoegen als deze een waarde heeft -->
			<xsl:choose>
				<xsl:when test="$hnraanduiding != ''">
					<xsl:text>(</xsl:text>
					<xsl:value-of select="$hnraanduiding"/>
					<xsl:text>)</xsl:text>
				</xsl:when>
			</xsl:choose>
		</xsl:variable>
		<!-- eventuele overbodige spaties eruit strippen -->
		<xsl:value-of select='normalize-space($volledig)'/>
	</xsl:template>
	<!-- ############################################# -->
	<!-- voorletters obv voornamen bepalen -->
	<xsl:template name="create_voorletters">
		<!-- ############################################# -->
		<xsl:param name="voornamen" select="' '"/>
		<xsl:param name="separator" select="' '"/>
		<xsl:for-each select="tokenize($voornamen,$separator)">
			<xsl:value-of select="substring(.,1,1)"/>
			<xsl:text>.</xsl:text>
		</xsl:for-each>
		<xsl:text/>
	</xsl:template>
	<!-- ############################################# -->
	<!-- volledige naam obv voorkeursnaamgebruik samenstellen -->
	<!-- houdt geen rekening met adellijke titels -->
	<xsl:template name="create_naam">
		<!-- ############################################# -->
		<xsl:param name="voornamen"/>
		<xsl:param name="naamgebruik"/>
		<xsl:param name="voorvoegselGeslachtsnaam"/>
		<xsl:param name="achternaam"/>
		<xsl:param name="voorvoegselGeslachtsnaamPartner"/>
		<xsl:param name="AchternaamPartner"/>
		<xsl:variable name="voorletters">
			<xsl:call-template name="create_voorletters">
				<xsl:with-param name="voornamen" select="$voornamen"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$naamgebruik = 'E' ">
				<!-- .Naam = String.Format("{0} {1} {2}", .Voorletters, .Tussenvoegsels, .Achternaam) -->
				<xsl:value-of select="concat($voorletters, $voorvoegselGeslachtsnaam,' ', $achternaam)"/>
			</xsl:when>
			<xsl:when test="$naamgebruik = 'P' ">
				<!-- .Naam = String.Format("{0} {1} {2}", .Voorletters, .TussenvoegselsPartner, .AchternaamPartner) -->
				<xsl:value-of select="concat($voorletters,$voorvoegselGeslachtsnaamPartner,$AchternaamPartner)"/>
			</xsl:when>
			<xsl:when test="$naamgebruik = 'V' ">
				<!-- .Naam = String.Format("{0} {1} {2}-{3} {4}", .Voorletters, .TussenvoegselsPartner, .AchternaamPartner, .Tussenvoegsels, .Achternaam) -->
				<xsl:value-of select="concat($voorletters,' ',$voorvoegselGeslachtsnaamPartner,$AchternaamPartner,'-',$voorvoegselGeslachtsnaam,$achternaam)"/>
			</xsl:when>
			<xsl:when test="$naamgebruik = 'N' ">
				<!-- .Naam = String.Format("{0} {1} {2}-{3} {4}", .Voorletters, .Tussenvoegsels, .Achternaam, .TussenvoegselsPartner, .AchternaamPartner) -->
				<xsl:value-of select="concat($voorletters,$voorvoegselGeslachtsnaam,$achternaam,'-',$voorvoegselGeslachtsnaamPartner,$AchternaamPartner)"/>
			</xsl:when>
		</xsl:choose>
		<!-- .Naam = Trim(.Naam).Replace("  ", " ") -->
	</xsl:template>
	<!-- ############################################# -->
	<!-- bepalen of een reisdocument nog geldig is obv einddatum -->
	<xsl:template name="isValidId">
		<xsl:param name="idDate"/>
		<!--<xsl:when test="select="current()/rubrieken/rubriek[nummer='3550']/waarde/text()" > select="current-date()" "> -->
		<!-- <xsl:variable name="date" select="xs:date(concat(substring(date, 7, 4), '-',  substring(date, 4, 2), '-', substring(date, 1, 2)))"/> -->
		<!--<xsl:choose>
			<xsl:when test="$date gt xs:date('2014-10-01')">
				-->
		<!-- code for dates later than 2014-10-01  -->
		<!--
			</xsl:when>
			<xsl:otherwise>
				-->
		<!-- code for dates earlier than or equal to 2014-10-01 -->
		<!--
			</xsl:otherwise>
		</xsl:choose>-->
	</xsl:template>
</xsl:stylesheet>
